[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml']

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = 'go'

[[plugins]]
repo = 'previm/previm'
on_ft = 'markdown'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_source = 'previm'

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = ['Capture']

# [[plugins]]
# repo = 'Shougo/denite.nvim'
# if = '''has('python3')'''
# on_cmd = 'Denite'
# depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
# hook_source = '''
# call denite#custom#var('grep', {
#     \ 'command': ['rg'],
#     \ 'default_opts': ['-i', '--vimgrep', '--no-heading'],
#     \ 'recursive_opts': [],
#     \ 'pattern_opt': ['--regexp'],
#     \ 'separator': ['--'],
#     \ 'final_opts': [],
#     \ })
# call denite#custom#var('file/rec', 'command',
#     \ ['rg', '--files', '--glob', '!.git', '--color', 'never'])
# call denite#custom#var('outline', 'ignore_types', ['v', 's', 'm'])
# if has('nvim')
# call denite#custom#option('default', {
#     \ 'source_names': 'short'})
# endif
# '''

[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
setlocal dictionary+=/usr/share/dict/words
call ddc#custom#patch_global('ui', 'native')
call ddc#custom#patch_global('sourceParams', {
    \ 'dictionary': {'dictPaths': ['/usr/share/dict/words'],
    \   'smartCase': v:true,
    \   'showMenu': v:false,},
    \ 'lsp': {
    \   'snippetEngine': denops#callback#register({body -> vsnip#anonymous(body)}),
    \   'enableResolveItem': v:true,
    \   'enableAdditionalTextEdit': v:true,
    \   }
    \ })
call ddc#custom#patch_global('autoCompleteEvents',
    \ ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged', 'CmdlineEnter'])
call ddc#custom#patch_global('sources', ['around', 'buffer', 'dictionary'])
call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \   'ignoreCase': v:true,
    \   'matchers': ['matcher_fuzzy', 'matcher_length'],
    \   'sorters': ['sorter_rank'],
    \   'converters': ['converter_remove_overlap'],
    \ },
    \ 'around': {'mark': 'A'},
    \ 'buffer': {'mark': 'B'},
    \ 'dictionary': {'mark': 'D'},
    \ 'necovim': {'mark': 'vim'},
    \ 'lsp': {
    \   'mark': 'lsp',
    \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \ },
    \ 'vsnip': {
    \   'mark': 'snip'
    \ },
    \ })

call ddc#custom#patch_filetype(
    \ ['vim', 'toml'], 'sources',
    \ ['necovim', 'around']
    \ )

call ddc#custom#patch_filetype(
    \ ['c', 'cpp', 'dockerfile', 'go', 'php', 'python', 'yaml', 'typescript', 'javascript', 'html', 'lua'], 'sources',
    \ ['vsnip', 'lsp', 'around', 'buffer']
    \ )

call lexima#init()
inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
    \ "\<TAB>" : ddc#manual_complete()

cnoremap <expr> <Tab>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ exists('b:ddc_cmdline_completion') ?
    \ ddc#manual_complete() : nr2char(&wildcharm)
cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
cnoremap <C-c>   <Cmd>call pum#map#cancel()<CR>
cnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
cnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>

call ddc#enable()
'''
hook_add = '''
nnoremap ;       <Cmd>call CommandlinePre(':')<CR>:
nnoremap /       <Cmd>call CommandlinePre('/')<CR>/
nnoremap ?       <Cmd>call CommandlinePre('?')<CR>?

function! CommandlinePre(mode) abort
    set wildchar=<C-t>
    set wildcharm=<C-t>

    cnoremap <expr><buffer> <Tab>
        \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
        \ exists('b:ddc_cmdline_completion') ? ddc#map#manual_complete() : "\<C-t>"

    " Overwrite sources
    if !exists('b:prev_buffer_config')
        let b:prev_buffer_config = ddc#custom#get_buffer()
    endif

    call ddc#custom#patch_buffer('ui', 'pum')

    if a:mode ==# ":"
        call ddc#custom#patch_buffer('cmdlineSources', ['cmdline', 'around'])
        call ddc#custom#patch_buffer(#{
        \   sourceOptions: #{
        \       _: #{
        \           keywordPattern: '[0-9a-zA-z_:#]*',
        \       },
        \   },
        \ })
    else
        call ddc#custom#patch_buffer('cmdlineSources', ['around'])
    endif

    autocmd User DDCCmdlineLeave ++once call CommandlinePost()
    autocmd InsertEnter <buffer> ++once call CommandlinePost()

    " Enable command line completion
    call ddc#enable_cmdline_completion()
endfunction

function! CommandlinePost() abort
    silent! cunmap <buffer> <Tab>

    " Restore sources
    if exists('b:prev_buffer_config')
        call ddc#custom#set_buffer(b:prev_buffer_config)
        unlet b:prev_buffer_config
    else
        call ddc#custom#set_buffer({})
    endif

    set wildcharm=<Tab>
endfunction
'''

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-dictionary'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

#[[plugins]]
#repo = 'matsui54/denops-signature_help'
#on_source = 'ddc.vim'
#hook_source = '''
#call signature_help#enable()
#'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = ['InsertEnter']
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_source = '''
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
imap <expr> <Tab> pumvisible() ? "\<C-n>" : vsnip#jumpable(1) ? "\<Plug>(vsnip-jump-next)" : "\<Tab>"
smap <expr> <Tab> vsnip#jumpable(1) ? "\<Plug>(vsnip-jump-next)" : "\<Tab>"
'''

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
on_source = 'ddc.vim'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_cmd = ['SudaRead', 'SudaWrite']

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
if = '''has('nvim')'''
on_ft = ['yaml']
lua_source = '''
require("ibl").setup()
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = ['Gina']

[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
on_source = ['denops.vim']
hook_source = '''
call ddu#custom#patch_global({
    \ 'ui': 'ff',
    \ 'sourceOptions': {
    \   '_': {
    \       'ignoreCase': v:true,
    \       'matchers': ['matcher_substring'],
    \   },
    \ },
    \ 'uiParams': {
    \   'ff': {
    \       'split': 'floating',
    \       'prompt': '> ',
    \       'filterSplitDirection': 'floating',
    \       'displaySourceName': 'short',
    \       'previewHeight': 20,
    \       'floatingBorder': 'rounded',
    \   }
    \ },
    \ 'kindOptions': {
    \   'file': {
    \       'defaultAction': 'open',
    \   },
    \   'action': {
    \       'defaultAction': 'do',
    \   },
    \ }
    \ })
'''
hook_add = '''
nnoremap <silent> <Leader>b :<C-u>Ddu file file_old<CR>
nnoremap <silent> <Leader>r :<C-u>Ddu file_rec<CR>
nnoremap <silent> <Leader>g <Cmd>DduRgLive<CR>
nnoremap <silent> <Leader>l :<C-u>Ddu line -ui-ff-param-startFilter<CR>

autocmd FileType ddu-ff call s:ddu_settings()
autocmd FileType ddu-ff-filter call s:ddu_ff_settings()
function! s:ddu_settings() abort
    nnoremap <buffer><silent> <CR>
                \ <Cmd>call ddu#ui#do_action('itemAction')<CR>
    nnoremap <buffer><silent> i
                \ <Cmd>call ddu#ui#do_action('openFilterWindow')<CR>
    nnoremap <buffer><silent> a
                \ <Cmd>call ddu#ui#do_action('chooseAction')<CR>
    nnoremap <buffer><silent> p
                \ <Cmd>call ddu#ui#do_action('preview')<CR>
    nnoremap <buffer><silent> q
               \ <Cmd>call ddu#ui#do_action('quit')<CR>
endfunction

function! s:ddu_ff_settings() abort
    inoremap <buffer><silent> <CR>
        \ <Esc><Cmd>close<CR>
    nnoremap <buffer><silent> <CR>
        \ <Cmd>close<CR>
    nnoremap <buffer><silent> q
        \ <Cmd>close<CR>
endfunction

command! DduRgLive call <SID>ddu_rg_live()

function! s:ddu_rg_live() abort
    call ddu#start({
        \   'sources': [{
        \       'name': 'rg',
        \       'options': {'matchers':[], 'volatile': v:true},
        \   }],
        \   'uiParams': {'ff': {
        \       'ignoreEmpty': v:false,
        \       'autoResize': v:false,
        \   }}
        \ })
endfunction
'''

[[plugins]]
repo = 'Shougo/ddu-commands.vim'
depends = 'ddu.vim'
on_cmd = ['Ddu']

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-action'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_old'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-line'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
on_source = 'ddu.vim'
