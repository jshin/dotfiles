[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml']

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['denite.nvim']

[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = 'go'

[[plugins]]
repo = 'previm/previm'
on_ft = 'markdown'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_source = 'previm'

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = ['Capture']

[[plugins]]
repo = 'Shougo/defx.nvim'
if = '''has('python3')'''
on_source = 'denite.nvim'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
hook_source = '''
call defx#custom#column('icon', {
    \ 'directory_icon': '▸',
    \ 'opened_icon': '▾',
    \ 'root_icon': ' ',
    \ })
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
if = '''has('python3')'''
on_cmd = 'Denite'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
hook_source = '''
call denite#custom#var('grep', {
    \ 'command': ['rg'],
    \ 'default_opts': ['-i', '--vimgrep', '--no-heading'],
    \ 'recursive_opts': [],
    \ 'pattern_opt': ['--regexp'],
    \ 'separator': ['--'],
    \ 'final_opts': [],
    \ })
call denite#custom#var('file/rec', 'command',
    \ ['rg', '--files', '--glob', '!.git', '--color', 'never'])
call denite#custom#var('outline', 'ignore_types', ['v', 's', 'm'])
if has('nvim')
call denite#custom#option('default', {
    \ 'source_names': 'short'})
endif
'''

[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim']
on_event = ['InsertEnter']
hook_source = '''
setlocal dictionary+=/usr/share/dict/words
call ddc#custom#patch_global('sourceParams', {
    \ 'dictionary': {'dictPaths': ['/usr/share/dict/words'],
    \ 'smartCase': v:true,
    \ 'showMenu': v:false,}
    \ })
call ddc#custom#patch_global('sources', ['around', 'dictionary'])
call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \   'ignoreCase': v:true,
    \   'matchers': ['matcher_fuzzy', 'matcher_length'],
    \   'sorters': ['sorter_rank'],
    \   'converters': ['converter_remove_overlap'],
    \ },
    \ 'around': {'mark': 'A'},
    \ 'dictionary': {'mark': 'D'},
    \ 'necovim': {'mark': 'vim'},
    \ 'vim-lsp': {
    \   'mark': 'lsp',
    \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \ },
    \ 'vsnip': {
    \   'mark': 'snip'
    \ },
    \ })

call ddc#custom#patch_filetype(
    \ ['vim', 'toml'], 'sources',
    \ ['necovim', 'around']
    \ )

call ddc#custom#patch_filetype(
    \ ['c', 'cpp', 'dockerfile', 'go', 'php', 'python', 'sh', 'yaml', 'typescript', 'javascript'], 'sources',
    \ ['vsnip', 'vim-lsp', 'around']
    \ )

call lexima#init()
inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
    \ "\<TAB>" : ddc#manual_complete()

call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-dictionary'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-matcher_fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
call signature_help#enable()
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = ['InsertEnter']
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_source = '''
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
imap <expr> <Tab> pumvisible() ? "\<C-n>" : vsnip#jumpable(1) ? "\<Plug>(vsnip-jump-next)" : "\<Tab>"
smap <expr> <Tab> vsnip#jumpable(1) ? "\<Plug>(vsnip-jump-next)" : "\<Tab>"
'''

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'google/vim-jsonnet'
on_ft = 'jsonnet'

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_cmd = ['SudaRead', 'SudaWrite']
